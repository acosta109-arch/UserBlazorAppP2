@page "/Edit/Roles/{id:int}"
@inject IClientService<AspNetRoles> roleService
@inject IClientService<AspNetRoleClaims> roleClaimService
@inject NavigationManager Navigation

<PageTitle>Modificar rol</PageTitle>

<EditForm Model="Rol" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />
    <div class="container">
        <div class="card shadow-lg">
            @*Header*@
            <div class="card-header text-center">
                <div class="bg-primary text-white">
                    <h3><strong>Modificar rol</strong></h3>
                </div>
            </div>

            @*Body*@
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        <!-- Role Name -->
                        <label class="form-label" for="name"><strong>Nombre del Rol</strong></label>
                        <InputText class="form-control" id="name" @bind-Value="Rol.Name"></InputText>
                        <ValidationMessage For="@(() => Rol.Name)" />
                    </div>
                </div>
                <!-- Claims -->
                <div class="row mt-3">
                    <div class="col-4">
                        <label class="form-label"><strong>Claim Type</strong></label>
                        <InputText class="form-control" @bind-Value="claimTypeSeleccionado"></InputText>
                    </div>
                    <div class="col-4">
                        <label class="form-label"><strong>Claim Value</strong></label>
                        <InputText class="form-control" @bind-Value="claimValueSeleccionado"></InputText>
                    </div>
                    <div class="col-4">
                        <button type="button" class="btn btn-success mt-4 bi bi-plus-circle-fill" @onclick="AgregarClaim">  Agregar Claim</button>
                    </div>
                </div>
                <!-- Lista de Claims seleccionados -->
                <table class="table table-bordered mt-3">
                    <thead>
                        <tr>
                            <th>Claim Type</th>
                            <th>Claim Value</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var claim in ListaClaims)
                        {
                            <tr>
                                <td>@claim.ClaimType</td>
                                <td>@claim.ClaimValue</td>
                                <td>
                                    <button class="btn btn-danger bi bi-trash-fill" type="button" @onclick="() => EliminarClaim(claim)">  Eliminar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @*Footer*@
            <div class="card-footer text-center">
                <button type="button" class="btn btn-secondary ms-2 bi bi-arrow-90deg-left" @onclick="Volver">  Volver</button>
                <button type="submit" class="btn btn-primary ms-2 bi bi-floppy-fill">  Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    public AspNetRoles Rol { get; set; } = new AspNetRoles();
    public List<AspNetRoleClaims> ListaClaims { get; set; } = new List<AspNetRoleClaims>();
    public string claimTypeSeleccionado { get; set; } = "";
    public string claimValueSeleccionado { get; set; } = "";
    public List<ToastMessage> MensajeToast { get; set; } = new List<ToastMessage>();

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
      => new ToastMessage
          {
              Type = toastType,
              Title = "Notificación",
              HelpText = $"{DateTime.Now}",
              Message = mensaje,
          };

    private void Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }

    protected override async Task OnInitializedAsync()
    {
        Rol = await roleService.GetByIdAsync(Id);
        ListaClaims = await roleClaimService.GetAllAsync();
        ListaClaims = ListaClaims.Where(c => c.RoleId == Id).ToList();
    }

    public async Task Guardar()
    {
        var result = await roleService.UpdateAsync(Rol);

        if (result != null)
        {
            foreach (var claim in ListaClaims)
            {
                claim.RoleId = Rol.Id;
                await roleClaimService.UpdateAsync(claim);
            }
            Mensaje(ToastType.Success, "Rol actualizado correctamente.");
            Navigation.NavigateTo("/Index/Roles");
        }
        else
        {
            Mensaje(ToastType.Danger, "Error al actualizar el rol.");
        }
    }

    public void Volver()
    {
        Navigation.NavigateTo("/Index/Roles");
    }

    public void AgregarClaim()
    {
        if (!string.IsNullOrEmpty(claimTypeSeleccionado) && !string.IsNullOrEmpty(claimValueSeleccionado))
        {
            ListaClaims.Add(new AspNetRoleClaims
                {
                    ClaimType = claimTypeSeleccionado,
                    ClaimValue = claimValueSeleccionado,
                    RoleId = Rol.Id
                });

            claimTypeSeleccionado = "";
            claimValueSeleccionado = "";
        }
    }

    public void EliminarClaim(AspNetRoleClaims claim)
    {
        ListaClaims.Remove(claim);
    }
}
